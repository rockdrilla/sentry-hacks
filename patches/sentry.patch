--- a/src/sentry/api/event_search.py
+++ b/src/sentry/api/event_search.py
@@ -9,7 +9,7 @@ from typing import Any, List, Mapping, NamedTuple, Sequence, Set, Tuple, Union
 
 from django.utils.functional import cached_property
 from parsimonious.exceptions import IncompleteParseError
-from parsimonious.expressions import Optional
+from parsimonious.expressions import Quantifier
 from parsimonious.grammar import Grammar, NodeVisitor
 from parsimonious.nodes import Node
 
@@ -259,9 +259,23 @@ def flatten(children):
     return children
 
 
+def is_optional_quantifier(x):
+    if not isinstance(x, Quantifier):
+        return False
+    # ZeroOrMore and OneOrMore have "max" equal to "float('inf')"
+    # Optional has "max" equal to "int(1)"
+    return (x.max == 1) and (x.min == 0)
+
+
+def is_optional(x):
+    if not isinstance(x, Node):
+        return False
+    return is_optional_quantifier(x.expr)
+
+
 def remove_optional_nodes(children):
     def is_not_optional(child):
-        return not (isinstance(child, Node) and isinstance(child.expr, Optional))
+        return not is_optional(child)
 
     return list(filter(is_not_optional, children))
 
@@ -302,7 +316,7 @@ def handle_negation(negation, operator):
 
 def get_operator_value(operator):
     if isinstance(operator, Node):
-        operator = "=" if isinstance(operator.expr, Optional) else operator.text
+        operator = "=" if is_optional_quantifier(operator.expr) else operator.text
     elif isinstance(operator, list):
         operator = operator[0]
     return operator
--- a/src/sentry/services/http.py
+++ b/src/sentry/services/http.py
@@ -6,20 +6,6 @@ from typing import Any, Generator, MutableMapping, NoReturn
 
 from sentry.services.base import Service
 
-PYUWSGI_PROG = """\
-import os
-import sys
-
-orig = sys.getdlopenflags()
-sys.setdlopenflags(orig | os.RTLD_GLOBAL)
-try:
-    import pyuwsgi
-finally:
-    sys.setdlopenflags(orig)
-
-pyuwsgi.run()
-"""
-
 
 def convert_options_to_env(options: dict[str, Any]) -> Generator[tuple[str, str], None, None]:
     for k, v in options.items():
@@ -193,6 +179,4 @@ class SentryHTTPServer(Service):
             httpd.serve_forever()
             raise AssertionError("unreachable")
         else:
-            # TODO: https://github.com/lincolnloop/pyuwsgi-wheels/pull/17
-            cmd = (sys.executable, "-c", PYUWSGI_PROG)
-            os.execvp(cmd[0], cmd)
+            os.execvp("uwsgi", ("uwsgi",))
--- a/src/sentry/utils/json.py
+++ b/src/sentry/utils/json.py
@@ -77,11 +77,11 @@ class JSONEncoderForHTML(JSONEncoder):
     def encode(self, o: object) -> str:
         # Override JSONEncoder.encode because it has hacks for
         # performance that make things more complicated.
-        chunks = self.iterencode(o, True)
+        chunks = self.iterencode(o)
         return "".join(chunks)
 
-    def iterencode(self, o: object, _one_shot: bool = False) -> Generator[str, None, None]:
-        chunks = super().iterencode(o, _one_shot)
+    def iterencode(self, o: object) -> Generator[str, None, None]:
+        chunks = super().iterencode(o)
         for chunk in chunks:
             chunk = chunk.replace("&", "\\u0026")
             chunk = chunk.replace("<", "\\u003c")
