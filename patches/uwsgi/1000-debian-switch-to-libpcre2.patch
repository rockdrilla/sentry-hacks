Description: switch to pcre2
Origin: upstream, https://github.com/unbit/uwsgi/pull/2543
Author: Alexandre Rossi <alexandre.rossi@gmail.com>
Bug: https://github.com/unbit/uwsgi/pull/2543
Last-Update: 2023-07-25
---
This patch header follows DEP-3: http://dep.debian.net/deps/dep3/
--- a/core/alarm.c
+++ b/core/alarm.c
@@ -170,7 +170,7 @@
 	}
 
 	ual = uwsgi_calloc(sizeof(struct uwsgi_alarm_log));
-	if (uwsgi_regexp_build(regexp, &ual->pattern, &ual->pattern_extra)) {
+	if (uwsgi_regexp_build(regexp, &ual->pattern)) {
 		return -1;
 	}
 	ual->negate = negate;
@@ -383,7 +383,7 @@
 		return;
 	struct uwsgi_alarm_log *ual = uwsgi.alarm_logs;
 	while (ual) {
-		if (uwsgi_regexp_match(ual->pattern, ual->pattern_extra, msg, len) >= 0) {
+		if (uwsgi_regexp_match(ual->pattern, msg, len) >= 0) {
 			if (!ual->negate) {
 				struct uwsgi_alarm_ll *uall = ual->alarms;
 				while (uall) {
--- a/core/logging.c
+++ b/core/logging.c
@@ -1402,7 +1402,7 @@
                 uwsgi_alarm_log_check(uwsgi.log_master_buf, rlen);
                 struct uwsgi_regexp_list *url = uwsgi.log_drain_rules;
                 while (url) {
-                        if (uwsgi_regexp_match(url->pattern, url->pattern_extra, uwsgi.log_master_buf, rlen) >= 0) {
+                        if (uwsgi_regexp_match(url->pattern, uwsgi.log_master_buf, rlen) >= 0) {
                                 return 0;
                         }
                         url = url->next;
@@ -1411,7 +1411,7 @@
                         int show = 0;
                         url = uwsgi.log_filter_rules;
                         while (url) {
-                                if (uwsgi_regexp_match(url->pattern, url->pattern_extra, uwsgi.log_master_buf, rlen) >= 0) {
+                                if (uwsgi_regexp_match(url->pattern, uwsgi.log_master_buf, rlen) >= 0) {
                                         show = 1;
                                         break;
                                 }
@@ -1424,7 +1424,7 @@
                 url = uwsgi.log_route;
                 int finish = 0;
                 while (url) {
-                        if (uwsgi_regexp_match(url->pattern, url->pattern_extra, uwsgi.log_master_buf, rlen) >= 0) {
+                        if (uwsgi_regexp_match(url->pattern, uwsgi.log_master_buf, rlen) >= 0) {
                                 struct uwsgi_logger *ul_route = (struct uwsgi_logger *) url->custom_ptr;
                                 if (ul_route) {
 					uwsgi_log_func_do(uwsgi.requested_log_encoders, ul_route, uwsgi.log_master_buf, rlen);
@@ -1468,7 +1468,7 @@
                 struct uwsgi_regexp_list *url = uwsgi.log_req_route;
                 int finish = 0;
                 while (url) {
-                        if (uwsgi_regexp_match(url->pattern, url->pattern_extra, uwsgi.log_master_buf, rlen) >= 0) {
+                        if (uwsgi_regexp_match(url->pattern, uwsgi.log_master_buf, rlen) >= 0) {
                                 struct uwsgi_logger *ul_route = (struct uwsgi_logger *) url->custom_ptr;
                                 if (ul_route) {
                                         uwsgi_log_func_do(uwsgi.requested_log_req_encoders, ul_route, uwsgi.log_master_buf, rlen);
--- a/core/regexp.c
+++ b/core/regexp.c
@@ -13,49 +13,65 @@
 #endif
 }
 
-int uwsgi_regexp_build(char *re, pcre ** pattern, pcre_extra ** pattern_extra) {
+int uwsgi_regexp_build(char *re, pcre2_code ** pattern) {
 
-	const char *errstr;
-	int erroff;
+	int errnbr;
+	long unsigned int erroff;
 
-	*pattern = pcre_compile((const char *) re, 0, &errstr, &erroff, NULL);
+	*pattern = pcre2_compile((const unsigned char *) re, PCRE2_ZERO_TERMINATED, 0, &errnbr, &erroff, NULL);
 	if (!*pattern) {
-		uwsgi_log("pcre error: %s at offset %d\n", errstr, erroff);
+		uwsgi_log("pcre error: code %d at offset %d\n", errnbr, erroff);
 		return -1;
 	}
 
-	int opt = uwsgi.pcre_jit;
-
-	*pattern_extra = (pcre_extra *) pcre_study((const pcre *) *pattern, opt, &errstr);
-	if (*pattern_extra == NULL && errstr != NULL) {
-		pcre_free(*pattern);
-		uwsgi_log("pcre (study) error: %s\n", errstr);
-		return -1;
+	if (uwsgi.pcre_jit) {
+		errnbr = pcre2_jit_compile(*pattern, PCRE2_JIT_COMPLETE);
+		if (errnbr) {
+			uwsgi_log("pcre JIT compile error code %d\n", errnbr);
+			return -1;
+		}
 	}
 
 	return 0;
 
 }
 
-int uwsgi_regexp_match(pcre * pattern, pcre_extra * pattern_extra, char *subject, int length) {
+int uwsgi_regexp_match(pcre2_code *pattern, const char *subject, int length) {
 
-	return pcre_exec((const pcre *) pattern, (const pcre_extra *) pattern_extra, subject, length, 0, 0, NULL, 0);
+	return pcre2_match(pattern, (const unsigned char *)subject, length, 0, 0, NULL, NULL);
 }
 
-int uwsgi_regexp_match_ovec(pcre * pattern, pcre_extra * pattern_extra, char *subject, int length, int *ovec, int n) {
+int uwsgi_regexp_match_ovec(pcre2_code *pattern, const char *subject, int length, int *ovec, int n) {
+
+	int rc;
+	int i;
+	pcre2_match_data *match_data;
+	size_t *pcre2_ovec;
+
+	match_data = pcre2_match_data_create_from_pattern(pattern, NULL);
+	rc = pcre2_match(pattern, (const unsigned char *)subject, length, 0, 0, match_data, NULL);
 
 	if (n > 0) {
-		return pcre_exec((const pcre *) pattern, (const pcre_extra *) pattern_extra, subject, length, 0, 0, ovec, (n + 1) * 3);
+		// copy pcre2 output vector to uwsgi output vector
+		pcre2_ovec = pcre2_get_ovector_pointer(match_data);
+		for (i=0;i<2*n+1;i++) {
+			ovec[i] = pcre2_ovec[i];
+		}
 	}
-	return pcre_exec((const pcre *) pattern, (const pcre_extra *) pattern_extra, subject, length, 0, 0, NULL, 0);
+
+	pcre2_match_data_free(match_data);
+
+	return rc;
 }
 
-int uwsgi_regexp_ovector(pcre * pattern, pcre_extra * pattern_extra) {
+int uwsgi_regexp_ovector(pcre2_code *pattern) {
 
 	int n;
+	pcre2_match_data *match_data;
 
-	if (pcre_fullinfo((const pcre *) pattern, (const pcre_extra *) pattern_extra, PCRE_INFO_CAPTURECOUNT, &n))
-		return 0;
+	match_data = pcre2_match_data_create_from_pattern(pattern, NULL);
+	n = pcre2_get_ovector_count(match_data);
+	pcre2_match_data_free(match_data);
 
 	return n;
 }
@@ -66,7 +82,7 @@
 	int dollar = 0;
 
 	size_t dollars = n;
-	
+
 	for(i=0;i<dst_n;i++) {
 		if (dst[i] == '$') {
 			dollars++;
--- a/core/routing.c
+++ b/core/routing.c
@@ -211,7 +211,7 @@
 				subject = *subject2 ;
 				subject_len = *subject_len2;
 			}
-			n = uwsgi_regexp_match_ovec(routes->pattern, routes->pattern_extra, subject, subject_len, routes->ovector[wsgi_req->async_id], routes->ovn[wsgi_req->async_id]);
+			n = uwsgi_regexp_match_ovec(routes->pattern, subject, subject_len, routes->ovector[wsgi_req->async_id], routes->ovn[wsgi_req->async_id]);
 		}
 		else {
 			int ret = routes->if_func(wsgi_req, routes);
@@ -506,15 +506,15 @@
 
 		// fill them if needed... (this is an optimization for route with a static subject)
 		if (ur->subject && ur->subject_len) {
-                	if (uwsgi_regexp_build(ur->orig_route, &ur->pattern, &ur->pattern_extra)) {
+			if (uwsgi_regexp_build(ur->orig_route, &ur->pattern)) {
                         	exit(1);
                 	}
 
 			int i;
 			for(i=0;i<uwsgi.cores;i++) {
-                		ur->ovn[i] = uwsgi_regexp_ovector(ur->pattern, ur->pattern_extra);
+				ur->ovn[i] = uwsgi_regexp_ovector(ur->pattern);
                 		if (ur->ovn[i] > 0) {
-                        		ur->ovector[i] = uwsgi_calloc(sizeof(int) * (3 * (ur->ovn[i] + 1)));
+                        		ur->ovector[i] = uwsgi_calloc(sizeof(int) * (2 * (ur->ovn[i] + 1)));
                 		}
 			}
 		}
@@ -1484,38 +1484,27 @@
         ur->condition_ub[wsgi_req->async_id] = uwsgi_routing_translate(wsgi_req, ur, NULL, 0, ur->subject_str, semicolon - ur->subject_str);
         if (!ur->condition_ub[wsgi_req->async_id]) return -1;
 
-	pcre *pattern;
-	pcre_extra *pattern_extra;
+	pcre2_code *pattern;
 	char *re = uwsgi_concat2n(semicolon+1, ur->subject_str_len - ((semicolon+1) - ur->subject_str), "", 0);
-	if (uwsgi_regexp_build(re, &pattern, &pattern_extra)) {
+	if (uwsgi_regexp_build(re, &pattern)) {
 		free(re);
 		return -1;
 	}
 	free(re);
 
 	// a condition has no initialized vectors, let's create them
-	ur->ovn[wsgi_req->async_id] = uwsgi_regexp_ovector(pattern, pattern_extra);
+	ur->ovn[wsgi_req->async_id] = uwsgi_regexp_ovector(pattern);
         if (ur->ovn[wsgi_req->async_id] > 0) {
         	ur->ovector[wsgi_req->async_id] = uwsgi_calloc(sizeof(int) * (3 * (ur->ovn[wsgi_req->async_id] + 1)));
         }
 
-	if (uwsgi_regexp_match_ovec(pattern, pattern_extra, ur->condition_ub[wsgi_req->async_id]->buf, ur->condition_ub[wsgi_req->async_id]->pos, ur->ovector[wsgi_req->async_id], ur->ovn[wsgi_req->async_id] ) >= 0) {
-		pcre_free(pattern);
-#ifdef PCRE_STUDY_JIT_COMPILE
-		pcre_free_study(pattern_extra);
-#else
-		pcre_free(pattern_extra);
-#endif
+	if (uwsgi_regexp_match_ovec(pattern, ur->condition_ub[wsgi_req->async_id]->buf, ur->condition_ub[wsgi_req->async_id]->pos, ur->ovector[wsgi_req->async_id], ur->ovn[wsgi_req->async_id] ) >= 0) {
+		pcre2_code_free(pattern);
 		return 1;
 	}
 
-	pcre_free(pattern);
-#ifdef PCRE_STUDY_JIT_COMPILE
-	pcre_free_study(pattern_extra);
-#else
-	pcre_free(pattern_extra);
-#endif
-        return 0;
+	pcre2_code_free(pattern);
+	return 0;
 }
 
 static int uwsgi_route_condition_empty(struct wsgi_request *wsgi_req, struct uwsgi_route *ur) {
--- a/core/ssl.c
+++ b/core/ssl.c
@@ -148,7 +148,7 @@
 #ifdef UWSGI_PCRE
         struct uwsgi_regexp_list *url = uwsgi.sni_regexp;
         while(url) {
-                if (uwsgi_regexp_match(url->pattern, url->pattern_extra, (char *)servername, servername_len) >= 0) {
+                if (uwsgi_regexp_match(url->pattern, (char *)servername, servername_len) >= 0) {
                         SSL_set_SSL_CTX(ssl, url->custom_ptr);
                         return SSL_TLSEXT_ERR_OK;
                 }
--- a/core/static.c
+++ b/core/static.c
@@ -39,7 +39,7 @@
 	// check for regexp
 	struct uwsgi_regexp_list *url = uwsgi.static_gzip;
 	while(url) {
-		if (uwsgi_regexp_match(url->pattern, url->pattern_extra, filename, *filename_len) >= 0) {
+		if (uwsgi_regexp_match(url->pattern, filename, *filename_len) >= 0) {
 			goto gzip;
 		}
 		url = url->next;
@@ -225,7 +225,7 @@
 	char expires[31];
 
 	while (udd) {
-		if (uwsgi_regexp_match(udd->pattern, udd->pattern_extra, filename, filename_len) >= 0) {
+		if (uwsgi_regexp_match(udd->pattern, filename, filename_len) >= 0) {
 			int delta = uwsgi_str_num(udd->value, udd->vallen);
 			int size = uwsgi_http_date(now + delta, expires);
 			if (size > 0) {
@@ -238,7 +238,7 @@
 
 	udd = uwsgi.static_expires_mtime;
 	while (udd) {
-		if (uwsgi_regexp_match(udd->pattern, udd->pattern_extra, filename, filename_len) >= 0) {
+		if (uwsgi_regexp_match(udd->pattern, filename, filename_len) >= 0) {
 			int delta = uwsgi_str_num(udd->value, udd->vallen);
 			int size = uwsgi_http_date(st->st_mtime + delta, expires);
 			if (size > 0) {
@@ -260,7 +260,7 @@
 	char expires[31];
 
 	while (udd) {
-		if (uwsgi_regexp_match(udd->pattern, udd->pattern_extra, wsgi_req->path_info, wsgi_req->path_info_len) >= 0) {
+		if (uwsgi_regexp_match(udd->pattern, wsgi_req->path_info, wsgi_req->path_info_len) >= 0) {
 			int delta = uwsgi_str_num(udd->value, udd->vallen);
 			int size = uwsgi_http_date(now + delta, expires);
 			if (size > 0) {
@@ -273,7 +273,7 @@
 
 	udd = uwsgi.static_expires_path_info_mtime;
 	while (udd) {
-		if (uwsgi_regexp_match(udd->pattern, udd->pattern_extra, wsgi_req->path_info, wsgi_req->path_info_len) >= 0) {
+		if (uwsgi_regexp_match(udd->pattern, wsgi_req->path_info, wsgi_req->path_info_len) >= 0) {
 			int delta = uwsgi_str_num(udd->value, udd->vallen);
 			int size = uwsgi_http_date(st->st_mtime + delta, expires);
 			if (size > 0) {
@@ -295,7 +295,7 @@
 	char expires[31];
 
 	while (udd) {
-		if (uwsgi_regexp_match(udd->pattern, udd->pattern_extra, wsgi_req->uri, wsgi_req->uri_len) >= 0) {
+		if (uwsgi_regexp_match(udd->pattern, wsgi_req->uri, wsgi_req->uri_len) >= 0) {
 			int delta = uwsgi_str_num(udd->value, udd->vallen);
 			int size = uwsgi_http_date(now + delta, expires);
 			if (size > 0) {
@@ -308,7 +308,7 @@
 
 	udd = uwsgi.static_expires_uri_mtime;
 	while (udd) {
-		if (uwsgi_regexp_match(udd->pattern, udd->pattern_extra, wsgi_req->uri, wsgi_req->uri_len) >= 0) {
+		if (uwsgi_regexp_match(udd->pattern, wsgi_req->uri, wsgi_req->uri_len) >= 0) {
 			int delta = uwsgi_str_num(udd->value, udd->vallen);
 			int size = uwsgi_http_date(st->st_mtime + delta, expires);
 			if (size > 0) {
--- a/core/utils.c
+++ b/core/utils.c
@@ -2320,7 +2320,7 @@
 		old_url->next = url;
 	}
 
-	if (uwsgi_regexp_build(value, &url->pattern, &url->pattern_extra)) {
+	if (uwsgi_regexp_build(value, &url->pattern)) {
 		exit(1);
 	}
 	url->next = NULL;
@@ -2333,12 +2333,11 @@
 
 int uwsgi_regexp_match_pattern(char *pattern, char *str) {
 
-	pcre *regexp;
-	pcre_extra *regexp_extra;
+	pcre2_code *regexp;
 
-	if (uwsgi_regexp_build(pattern, &regexp, &regexp_extra))
+	if (uwsgi_regexp_build(pattern, &regexp))
 		return 1;
-	return !uwsgi_regexp_match(regexp, regexp_extra, str, strlen(str));
+	return !uwsgi_regexp_match(regexp, str, strlen(str));
 }
 
 
--- a/core/uwsgi.c
+++ b/core/uwsgi.c
@@ -4467,7 +4467,7 @@
 
 	char *regexp = uwsgi_concat2n(value, space - value, "", 0);
 
-	if (uwsgi_regexp_build(regexp, &new_udd->pattern, &new_udd->pattern_extra)) {
+	if (uwsgi_regexp_build(regexp, &new_udd->pattern)) {
 		exit(1);
 	}
 
--- a/uwsgi.h
+++ b/uwsgi.h
@@ -439,7 +439,8 @@
 #define uwsgi_wait_write_req(x) uwsgi.wait_write_hook(x->fd, uwsgi.socket_timeout) ; x->switches++
 
 #ifdef UWSGI_PCRE
-#include <pcre.h>
+#define PCRE2_CODE_UNIT_WIDTH 8
+#include <pcre2.h>
 #endif
 
 struct uwsgi_dyn_dict {
@@ -456,8 +457,7 @@
 	struct uwsgi_dyn_dict *next;
 
 #ifdef UWSGI_PCRE
-	pcre *pattern;
-	pcre_extra *pattern_extra;
+	pcre2_code *pattern;
 #endif
 
 };
@@ -471,8 +471,7 @@
 #ifdef UWSGI_PCRE
 struct uwsgi_regexp_list {
 
-	pcre *pattern;
-	pcre_extra *pattern_extra;
+	pcre2_code *pattern;
 
 	uint64_t custom;
 	char *custom_str;
@@ -1090,10 +1089,10 @@
 };
 
 #ifdef UWSGI_PCRE
-int uwsgi_regexp_build(char *, pcre **, pcre_extra **);
-int uwsgi_regexp_match(pcre *, pcre_extra *, char *, int);
-int uwsgi_regexp_match_ovec(pcre *, pcre_extra *, char *, int, int *, int);
-int uwsgi_regexp_ovector(pcre *, pcre_extra *);
+int uwsgi_regexp_build(char *, pcre2_code **);
+int uwsgi_regexp_match(pcre2_code *, const char *, int);
+int uwsgi_regexp_match_ovec(pcre2_code *, const char *, int, int *, int);
+int uwsgi_regexp_ovector(pcre2_code *);
 char *uwsgi_regexp_apply_ovec(char *, int, char *, int, int *, int);
 
 int uwsgi_regexp_match_pattern(char *pattern, char *str);
@@ -1182,8 +1181,7 @@
 
 struct uwsgi_route {
 
-	pcre *pattern;
-	pcre_extra *pattern_extra;
+	pcre2_code *pattern;
 
 	char *orig_route;
 	
@@ -1299,8 +1297,7 @@
 };
 
 struct uwsgi_alarm_log {
-	pcre *pattern;
-	pcre_extra *pattern_extra;
+	pcre2_code *pattern;
 	int negate;
 	struct uwsgi_alarm_ll *alarms;
 	struct uwsgi_alarm_log *next;
--- a/uwsgiconfig.py
+++ b/uwsgiconfig.py
@@ -1082,23 +1082,23 @@
         # re-enable after pcre fix
         if self.get('pcre'):
             if self.get('pcre') == 'auto':
-                pcreconf = spcall('pcre-config --libs')
+                pcreconf = spcall('pcre2-config --libs8')
                 if pcreconf:
                     self.libs.append(pcreconf)
-                    pcreconf = spcall("pcre-config --cflags")
+                    pcreconf = spcall("pcre2-config --cflags")
                     self.cflags.append(pcreconf)
                     self.gcc_list.append('core/regexp')
                     self.cflags.append("-DUWSGI_PCRE")
                     has_pcre = True
 
             else:
-                pcreconf = spcall('pcre-config --libs')
+                pcreconf = spcall('pcre2-config --libs8')
                 if pcreconf is None:
                     print("*** libpcre headers unavailable. uWSGI build is interrupted. You have to install pcre development package or disable pcre")
                     sys.exit(1)
                 else:
                     self.libs.append(pcreconf)
-                    pcreconf = spcall("pcre-config --cflags")
+                    pcreconf = spcall("pcre2-config --cflags")
                     self.cflags.append(pcreconf)
                     self.gcc_list.append('core/regexp')
                     self.cflags.append("-DUWSGI_PCRE")
--- a/plugins/php/php_plugin.c
+++ b/plugins/php/php_plugin.c
@@ -813,7 +813,7 @@
 #ifdef UWSGI_PCRE
 		struct uwsgi_regexp_list *bypass = uphp.app_bypass;
 		while (bypass) {
-                        if (uwsgi_regexp_match(bypass->pattern, bypass->pattern_extra, wsgi_req->uri, wsgi_req->uri_len) >= 0) {
+                        if (uwsgi_regexp_match(bypass->pattern, wsgi_req->uri, wsgi_req->uri_len) >= 0) {
 				goto oldstyle;
                         }
                         bypass = bypass->next;
