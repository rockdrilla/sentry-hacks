--- a/billiard/pool.py
+++ b/billiard/pool.py
@@ -1741,8 +1741,8 @@ class ApplyResult:
         cache[self._job] = self
 
     def __repr__(self):
-        return '<%s: {id} ack:{ack} ready:{ready}>'.format(
-            self.__class__.__name__,
+        return '<{name}: {id} ack:{ack} ready:{ready}>'.format(
+            name=self.__class__.__name__,
             id=self._job, ack=self._accepted, ready=self.ready(),
         )
 
--- a/billiard/process.py
+++ b/billiard/process.py
@@ -144,7 +144,7 @@ class BaseProcess:
         res = self._popen.wait(timeout)
         if res is not None:
             _children.discard(self)
-        self.close()
+            self.close()
 
     def is_alive(self):
         '''
--- a/celery/app/task.py
+++ b/celery/app/task.py
@@ -788,6 +788,7 @@ class Task:
 
         request = {
             'id': task_id,
+            'task': self.name,
             'retries': retries,
             'is_eager': True,
             'logfile': logfile,
@@ -824,7 +825,7 @@ class Task:
         if isinstance(retval, Retry) and retval.sig is not None:
             return retval.sig.apply(retries=retries + 1)
         state = states.SUCCESS if ret.info is None else ret.info.state
-        return EagerResult(task_id, retval, state, traceback=tb)
+        return EagerResult(task_id, self.name, retval, state, traceback=tb)
 
     def AsyncResult(self, task_id, **kwargs):
         """Get AsyncResult instance for the specified task.
--- a/celery/backends/database/models.py
+++ b/celery/backends/database/models.py
@@ -25,6 +25,7 @@ class Task(ResultModelBase):
     date_done = sa.Column(sa.DateTime, default=datetime.utcnow,
                           onupdate=datetime.utcnow, nullable=True)
     traceback = sa.Column(sa.Text, nullable=True)
+    children = sa.Column(PickleType, nullable=True)
 
     def __init__(self, task_id):
         self.task_id = task_id
@@ -36,6 +37,7 @@ class Task(ResultModelBase):
             'result': self.result,
             'traceback': self.traceback,
             'date_done': self.date_done,
+            'children': self.children,
         }
 
     def __repr__(self):
--- a/celery/result.py
+++ b/celery/result.py
@@ -983,10 +983,11 @@ class GroupResult(ResultSet):
 class EagerResult(AsyncResult):
     """Result that we know has already been executed."""
 
-    def __init__(self, id, ret_value, state, traceback=None):
+    def __init__(self, id, name, ret_value, state, traceback=None):
         # pylint: disable=super-init-not-called
         # XXX should really not be inheriting from AsyncResult
         self.id = id
+        self._name = name
         self._result = ret_value
         self._state = state
         self._traceback = traceback
@@ -1038,6 +1039,7 @@ class EagerResult(AsyncResult):
     @property
     def _cache(self):
         return {
+            'name': self._name,
             'task_id': self.id,
             'result': self._result,
             'status': self._state,
--- a/vine/__init__.py
+++ b/vine/__init__.py
@@ -1,16 +1,19 @@
 """Promises, promises, promises."""
 import re
-
 from collections import namedtuple
 
 from .abstract import Thenable
-from .promises import promise
-from .synchronization import barrier
 from .funtools import (
-    maybe_promise, ensure_promise,
-    ppartial, preplace, starpromise, transform, wrap,
+    ensure_promise,
+    maybe_promise,
+    ppartial,
+    preplace,
+    starpromise,
+    transform,
+    wrap,
 )
-
+from .promises import promise
+from .synchronization import barrier
 
 __version__ = '5.0.0'
 __author__ = 'Ask Solem'
@@ -29,8 +32,8 @@ _temp = re.match(
     r'(\d+)\.(\d+).(\d+)(.+)?', __version__).groups()
 VERSION = version_info = version_info_t(
     int(_temp[0]), int(_temp[1]), int(_temp[2]), _temp[3] or '', '')
-del(_temp)
-del(re)
+del (_temp)
+del (re)
 
 __all__ = [
     'Thenable', 'promise', 'barrier',
--- a/vine/promises.py
+++ b/vine/promises.py
@@ -1,9 +1,8 @@
 """Promise implementation."""
+import inspect
 import sys
-
 from collections import deque
-import inspect
-from weakref import ref, WeakMethod
+from weakref import WeakMethod, ref
 
 from .abstract import Thenable
 from .utils import reraise
@@ -78,6 +77,7 @@ class promise:
             'fun', 'args', 'kwargs', 'ready', 'failed',
             'value', 'ignore_result', 'reason', '_svpending', '_lvpending',
             'on_error', 'cancelled', 'weak', '__weakref__',
+            "__dict__",
         )
 
     def __init__(self, fun=None, args=None, kwargs=None,
--- a/vine/synchronization.py
+++ b/vine/synchronization.py
@@ -57,6 +57,13 @@ class barrier:
         if callback:
             self.then(callback)
 
+        __slots__ = (
+            'p', 'args', 'kwargs', '_value', 'size',
+            'ready', 'reason', 'cancelled', 'finalized',
+            '__weakref__',
+            "__dict__",
+        )
+
     def __call__(self, *args, **kwargs):
         if not self.ready and not self.cancelled:
             self._value += 1
--- a/vine/utils.py
+++ b/vine/utils.py
@@ -1,9 +1,6 @@
 """Python compatibility utilities."""
-from functools import (
-    WRAPPER_ASSIGNMENTS, WRAPPER_UPDATES,
-    update_wrapper as _update_wrapper,
-    partial,
-)
+from functools import WRAPPER_ASSIGNMENTS, WRAPPER_UPDATES, partial
+from functools import update_wrapper as _update_wrapper
 
 __all__ = ['update_wrapper', 'wraps']
 
